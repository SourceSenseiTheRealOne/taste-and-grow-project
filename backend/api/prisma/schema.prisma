// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/prisma-accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  TEACHER
  COORDINATOR
  PRINCIPAL
  ADMIN
  USER
}

model User {
  id                  String   @id @default(uuid())
  email               String   @unique
  name                String
  phone               String?
  password            String
  role                UserRole @default(USER)
  preferredLanguage   String?  @default("en") @map("preferred_language")
  schoolId            String?  @map("school_id")
  school              School?  @relation(fields: [schoolId], references: [id], onDelete: SetNull)
  schoolAccessCode    String?  @unique @map("school_access_code")
  parentsLink         String?  @unique @map("parents_link")
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("users")
}

model School {
  id                  String   @id @default(uuid())
  schoolName          String   @default("Unnamed School") @map("school_name")
  cityRegion          String   @default("Unknown") @map("city_region")
  contactName         String   @default("Unknown") @map("contact_name")
  email               String?
  phone               String?
  studentCount        Int?     @map("student_count")
  schoolCode          String   @unique @default(cuid()) @map("school_code")
  users               User[]
  teachers            Teacher[]
  schoolActivations   SchoolActivation[]
  experiences         Experience[]
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("schools")
}

model Teacher {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  schoolId  String   @map("school_id")
  school    School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("teachers")
}

model Experience {
  id                  String   @id @default(uuid())
  schoolId            String   @map("school_id")
  school              School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  name                String
  description         String?
  basePrice           Float    @map("base_price")
  itemsIncluded       String[] @map("items_included")
  active              Boolean  @default(true)
  schoolActivations   SchoolActivation[]
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("experiences")
}

model SchoolActivation {
  id                  String   @id @default(uuid())
  schoolId            String   @map("school_id")
  school              School   @relation(fields: [schoolId], references: [id], onDelete: Cascade)
  experienceId        String   @map("experience_id")
  experience          Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  eventDate           DateTime @map("event_date")
  fundraiserAmount    Float    @default(0) @map("fundraiser_amount")
  totalRaised         Float    @default(0) @map("total_raised")
  parentQrCode        String   @unique @map("parent_qr_code")
  teacherQrCode       String   @unique @map("teacher_qr_code")
  status              String   @default("pending") // pending, active, delivered
  createdAt           DateTime @default(now()) @map("created_at")
  updatedAt           DateTime @updatedAt @map("updated_at")

  @@map("school_activations")
}

enum ContentType {
  HERO
  HOW_IT_WORKS
  FOOD_KIT
  TESTIMONIAL
  FAQ
  FOOTER
  SEO
  CINEMATIC_INTRO
  MISSION_ROLES
  MISSION_CARDS
  SEED_CARDS
  FINAL_CTA
}

model WebsiteContent {
  id          String      @id @default(uuid())
  section     ContentType
  key         String      // Unique key for the content piece (e.g., "hero_title", "step_1_title")
  value       String      @db.Text // The actual content
  metadata    Json?       // Additional data (colors, images URLs, etc.)
  order       Int         @default(0) // For ordering items in lists
  active      Boolean     @default(true)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @updatedAt @map("updated_at")

  @@unique([section, key])
  @@map("website_content")
}
